#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http')
const cluster = require('cluster')
const numCPUs = require('os').cpus().length

const common = require('../pkg/utils/common')
const log = require('../pkg/utils/logger')

const config = require('../pkg/config')
const app = require('../pkg/app')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.schema.get('server.port'))
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

if (cluster.isMaster) {
  log.send('http-server').info('Server Master Started at PID ' + process.pid)

  if (config.schema.get('workers') == 0) {
    config.schema.set('workers', numCPUs)
  }

  if (config.schema.get('workers') <= numCPUs) {
    for (let i = 0; i < config.schema.get('workers'); i++) {
      cluster.fork()
    }
  } else {
    log.send('http-server').error('Error! Worker number is greater than maximum CPUs')
    process.exit(1)
  }

  cluster.on('exit', (worker, code, signal) => {
    log.send('http-server').warn('Server Worker Started at PID ' + worker.process.pid + ' Has Died, Restarting Server Worker')
    cluster.fork()
  })
} else {
  server.listen(port, config.schema.get('server.address'))

  server.on('listening', onListening)
  server.on('error', onError)
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  let addr = server.address()

  if (error.syscall !== 'listen') {
    log.send('http-server').error(common.strToTitleCase(error.message))
  }

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.send('http-server').error('Server Worker at PID ' + process.pid + ' in Address ' + addr.address + ':' + addr.port + ' Require Elevated Privileges')
      break
    case 'EADDRINUSE':
      log.send('http-server').error('Server Worker at PID ' + process.pid + ' in Address ' + addr.address + ':' + addr.port + ' is Already in Use')
      break
    default:
      log.send('http-server').error(common.strToTitleCase(error.message))
  }

  process.exit(1)
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address()
  log.send('http-server').info('Server Worker Started at PID ' + process.pid + ' Listening on ' + addr.address + ':' + addr.port)
}
